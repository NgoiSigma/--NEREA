# Œ£-NEREA / core/fdl_logic_engine.py

class FDLLogicEngine:
    def __init__(self):
        self.phase = "init"
        self.history = []

    def input_thesis(self, thesis: str) -> None:
        self.phase = "thesis"
        self.history.append({"thesis": thesis})
        print(f"üåÄ –¢–µ–∑–∏—Å –ø—Ä–∏–Ω—è—Ç: {thesis}")

    def generate_antithesis(self) -> str:
        self.phase = "antithesis"
        thesis = self.history[-1]["thesis"]
        antithesis = f"¬¨({thesis})"  # –ø–æ–∫–∞ —Ñ–æ—Ä–º–∞–ª—å–Ω–æ-—Å–∏–º–≤–æ–ª–∏—á–µ—Å–∫–∏
        self.history[-1]["antithesis"] = antithesis
        print(f"‚ö° –ê–Ω—Ç–∏—Ç–µ–∑–∏—Å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: {antithesis}")
        return antithesis

    def synthesize(self) -> str:
        self.phase = "synthesis"
        thesis = self.history[-1]["thesis"]
        antithesis = self.history[-1]["antithesis"]
        synthesis = f"Œ£({thesis} + {antithesis})"  # —Ñ–æ—Ä–º–∞–ª—å–Ω—ã–π —Å–∏–Ω—Ç–µ–∑
        self.history[-1]["synthesis"] = synthesis
        print(f"üîÆ –°–∏–Ω—Ç–µ–∑ –ø–æ–ª—É—á–µ–Ω: {synthesis}")
        return synthesis

    def emit(self) -> dict:
        self.phase = "emission"
        result = self.history[-1]
        print("üì° –≠–º–∏—Å—Å–∏—è –ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ —Ü–∏–∫–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        return result
