# Œ£-NEREA / modules/benchmark/fdl_benchmark.py

class FDLBenchmark:
    def __init__(self, agent):
        self.agent = agent

    def coherence_score(self):
        synths = [node.synthesis for node in self.agent.field.nodes]
        if not synths:
            return 0
        unique_chars = len(set("".join(synths)))
        return round(unique_chars / len(synths), 2)

    def report(self):
        score = self.coherence_score()
        if score > 5:
            return f"üìà –í—ã—Å–æ–∫–∞—è —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∞—è –ø–ª–æ—Ç–Ω–æ—Å—Ç—å: {score}"
        elif score > 3:
            return f"üß≠ –£–º–µ—Ä–µ–Ω–Ω—ã–π –∫–æ–≥–µ—Ä–µ–Ω—Ç–Ω—ã–π –ø–æ—Ç–æ–∫: {score}"
        return f"‚ö†Ô∏è –†–∞–∑—Ä–µ–∂–µ–Ω–Ω–æ—Å—Ç—å —Å–º—ã—Å–ª–æ–≤: {score}"
